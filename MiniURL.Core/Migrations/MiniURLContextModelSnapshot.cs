// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniURL.Core;

namespace MiniURL.Core.Migrations
{
    [DbContext(typeof(MiniURLContext))]
    partial class MiniURLContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MiniURL.Core.Models.MiniURL", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ExpiresOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Reference")
                        .IsUnique()
                        .HasFilter("[Reference] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("MiniUrls");
                });

            modelBuilder.Entity("MiniURL.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MiniURL.Core.Models.UserLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LinkDurationDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("UserLevels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc562af7-a171-4d4d-96b5-c1d2e9332c52"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 10, 6, 9, 58, 10, 447, DateTimeKind.Unspecified).AddTicks(8668), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "The default user level",
                            LinkDurationDays = 1,
                            Name = "Guest"
                        },
                        new
                        {
                            Id = new Guid("03b1f7a1-bc2b-4280-b770-fec905edd202"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 10, 6, 9, 58, 10, 448, DateTimeKind.Unspecified).AddTicks(7203), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "The user level for someone who has signed up",
                            LinkDurationDays = 5,
                            Name = "Regular"
                        },
                        new
                        {
                            Id = new Guid("507b4845-6d68-49dd-b2c5-1d4c6d41cbc6"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 10, 6, 9, 58, 10, 448, DateTimeKind.Unspecified).AddTicks(7281), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "The user level for a paying customer",
                            Name = "Premium"
                        });
                });

            modelBuilder.Entity("MiniURL.Core.Models.MiniURL", b =>
                {
                    b.HasOne("MiniURL.Core.Models.User", "User")
                        .WithMany("MiniUrls")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MiniURL.Core.ValueObjects.Url", "Url", b1 =>
                        {
                            b1.Property<Guid>("MiniURLId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Host")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Path")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Query")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Scheme")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MiniURLId");

                            b1.ToTable("MiniUrls");

                            b1.WithOwner()
                                .HasForeignKey("MiniURLId");
                        });

                    b.Navigation("Url");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniURL.Core.Models.User", b =>
                {
                    b.HasOne("MiniURL.Core.Models.UserLevel", "Level")
                        .WithMany("Users")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MiniURL.Core.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Domain")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Username")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("MiniURL.Core.Models.User", b =>
                {
                    b.Navigation("MiniUrls");
                });

            modelBuilder.Entity("MiniURL.Core.Models.UserLevel", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
